"""swap unit and section tables.

Revision ID: eaf5624377ff
Revises: c55a7903e841
Create Date: 2023-06-02 15:01:17.515347

"""
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "eaf5624377ff"
down_revision = "c55a7903e841"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade migrations."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "employee",
        sa.Column("section_uid", sqlmodel.sql.sqltypes.GUID(), nullable=False),
    )
    op.drop_constraint(
        "fk_employee_unit_uid_unit", "employee", type_="foreignkey"
    )  # type: ignore
    op.create_foreign_key(None, "employee", "section", ["section_uid"], ["uid"])
    op.drop_column("employee", "unit_uid")
    op.add_column(
        "section", sa.Column("unit_uid", sqlmodel.sql.sqltypes.GUID(), nullable=False)
    )
    op.drop_constraint("uq_section_department_uid", "section", type_="unique")
    op.create_unique_constraint(None, "section", ["unit_uid", "name"])
    op.drop_constraint(
        "fk_section_department_uid_department", "section", type_="foreignkey"
    )  # type: ignore
    op.create_foreign_key(None, "section", "unit", ["unit_uid"], ["uid"])
    op.drop_column("section", "department_uid")
    op.add_column(
        "unit",
        sa.Column("department_uid", sqlmodel.sql.sqltypes.GUID(), nullable=False),
    )
    op.drop_constraint("uq_unit_section_uid", "unit", type_="unique")  # type: ignore
    op.create_unique_constraint(None, "unit", ["department_uid", "name"])
    op.drop_constraint(
        "fk_unit_section_uid_section", "unit", type_="foreignkey"
    )  # type: ignore
    op.create_foreign_key(None, "unit", "department", ["department_uid"], ["uid"])
    op.drop_column("unit", "section_uid")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade migrations."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "unit",
        sa.Column(
            "section_uid", postgresql.UUID(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "unit", type_="foreignkey")  # type: ignore
    op.create_foreign_key(
        "fk_unit_section_uid_section", "unit", "section", ["section_uid"], ["uid"]
    )
    op.drop_constraint(None, "unit", type_="unique")  # type: ignore
    op.create_unique_constraint("uq_unit_section_uid", "unit", ["section_uid", "name"])
    op.drop_column("unit", "department_uid")
    op.add_column(
        "section",
        sa.Column(
            "department_uid", postgresql.UUID(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "section", type_="foreignkey")  # type: ignore
    op.create_foreign_key(
        "fk_section_department_uid_department",
        "section",
        "department",
        ["department_uid"],
        ["uid"],
    )
    op.drop_constraint(None, "section", type_="unique")  # type: ignore
    op.create_unique_constraint(
        "uq_section_department_uid", "section", ["department_uid", "name"]
    )
    op.drop_column("section", "unit_uid")
    op.add_column(
        "employee",
        sa.Column("unit_uid", postgresql.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "employee", type_="foreignkey")  # type: ignore
    op.create_foreign_key(
        "fk_employee_unit_uid_unit", "employee", "unit", ["unit_uid"], ["uid"]
    )
    op.drop_column("employee", "section_uid")
    # ### end Alembic commands ###
