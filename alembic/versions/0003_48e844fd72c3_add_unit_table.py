"""add unit table.

Revision ID: 48e844fd72c3
Revises: b955c27a10b3
Create Date: 2023-05-09 02:18:23.404008

"""
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "48e844fd72c3"
down_revision = "b955c27a10b3"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade migration."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "division",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column(
            "date_created",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "date_modified",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "uid",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("modified_by", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.PrimaryKeyConstraint("uid"),
    )
    op.create_index(op.f("ix_division_name"), "division", ["name"], unique=True)
    op.create_index(op.f("ix_division_uid"), "division", ["uid"], unique=True)
    op.create_table(
        "unit",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("section_uid", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column(
            "date_created",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "date_modified",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "uid",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("modified_by", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["section_uid"],
            ["section.uid"],
        ),
        sa.PrimaryKeyConstraint("uid"),
    )
    op.create_index(op.f("ix_unit_name"), "unit", ["name"], unique=True)
    op.create_index(op.f("ix_unit_uid"), "unit", ["uid"], unique=True)
    op.drop_index("ix_sub_section_name", table_name="sub_section")
    op.drop_index("ix_sub_section_uid", table_name="sub_section")
    op.drop_constraint(
        "fk_employee_sub_section_uid_sub_section", "employee", type_="foreignkey"
    )
    op.drop_table("sub_section")
    op.add_column(
        "department",
        sa.Column("division_uid", sqlmodel.sql.sqltypes.GUID(), nullable=False),
    )
    op.create_foreign_key(None, "department", "division", ["division_uid"], ["uid"])
    op.add_column(
        "employee", sa.Column("unit_uid", sqlmodel.sql.sqltypes.GUID(), nullable=False)
    )
    op.create_foreign_key(None, "employee", "unit", ["unit_uid"], ["uid"])
    op.drop_column("employee", "sub_section_uid")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade migration."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "employee",
        sa.Column(
            "sub_section_uid", postgresql.UUID(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "employee", type_="foreignkey")  # type: ignore
    op.create_foreign_key(
        "fk_employee_sub_section_uid_sub_section",
        "employee",
        "sub_section",
        ["sub_section_uid"],
        ["uid"],
    )
    op.drop_column("employee", "unit_uid")
    op.drop_constraint(None, "department", type_="foreignkey")  # type: ignore
    op.drop_column("department", "division_uid")
    op.create_table(
        "sub_section",
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "date_created",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "date_modified",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "uid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("created_by", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "modified_by", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "section_uid", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["section_uid"], ["section.uid"], name="fk_sub_section_section_uid_section"
        ),
        sa.PrimaryKeyConstraint("uid", name="pk_sub_section"),
    )
    op.create_index("ix_sub_section_uid", "sub_section", ["uid"], unique=False)
    op.create_index("ix_sub_section_name", "sub_section", ["name"], unique=False)
    op.drop_index(op.f("ix_unit_uid"), table_name="unit")
    op.drop_index(op.f("ix_unit_name"), table_name="unit")
    op.drop_table("unit")
    op.drop_index(op.f("ix_division_uid"), table_name="division")
    op.drop_index(op.f("ix_division_name"), table_name="division")
    op.drop_table("division")
    # ### end Alembic commands ###
